# API Gateway 服务独有配置
# 只包含网关特定的路由、限流、负载均衡等配置

server:
  port: 8080

spring:
  application:
    name: api-gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      routes:
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/api/users/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 100
                redis-rate-limiter.burstCapacity: 200
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@userKeyResolver}"
            - name: Authentication
              args:
                require-auth: false
        - id: product-service
          uri: lb://product-service
          predicates:
            - Path=/api/products/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 200
                redis-rate-limiter.burstCapacity: 400
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@userKeyResolver}"
        - id: order-service
          uri: lb://order-service
          predicates:
            - Path=/api/orders/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 50
                redis-rate-limiter.burstCapacity: 100
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@userKeyResolver}"
        - id: payment-service
          uri: lb://payment-service
          predicates:
            - Path=/api/payments/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 30
                redis-rate-limiter.burstCapacity: 60
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@userKeyResolver}"
            - AddRequestHeader=X-Gateway-Route, payment-service
            - AddRequestHeader=X-Circuit-Breaker-Enabled, true
        - id: metrics-collector
          uri: lb://metrics-collector
          predicates:
            - Path=/api/metrics/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 100
                redis-rate-limiter.burstCapacity: 200
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@userKeyResolver}"
        - id: notification-service
          uri: lb://notification-service
          predicates:
            - Path=/api/notifications/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 100
                redis-rate-limiter.burstCapacity: 200
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@userKeyResolver}"
        - id: eureka-server
          uri: lb://eureka-server
          predicates:
            - Path=/eureka/**
          filters:
            - StripPrefix=1
      
      # 全局过滤器
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
        - AddResponseHeader=X-Response-Default-Foo, Default-Bar
      
      # 全局CORS配置
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOriginPatterns: "*"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowedHeaders: "*"
            allowCredentials: true
            maxAge: 3600

# API Gateway 特性开关
feature:
  gateway:
    rate-limiting: true
    circuit-breaker: true
    load-balancing: true
    cors: true

# API Gateway 监控配置
management:
  endpoint:
    gateway:
      enabled: true
  metrics:
    distribution:
      percentiles-histogram:
        spring.cloud.gateway.requests: true
      slo:
        spring.cloud.gateway.requests: 50ms,100ms,200ms,300ms,500ms,1s

# API Gateway 日志配置
logging:
  level:
    com.shophub.gateway: DEBUG
    org.springframework.cloud.gateway: INFO

---
# Docker profile - API Gateway 在 Docker 环境下的特定配置
spring:
  config:
    activate:
      on-profile: docker

# Docker 环境下的网关配置
gateway:
  docker:
    network-mode: bridge
    container-name: api-gateway
    health-check:
      interval: 30s
      timeout: 10s
      retries: 3

# Docker 环境下的日志配置
logging:
  level:
    com.shophub.gateway: INFO
    org.springframework.cloud.gateway: WARN